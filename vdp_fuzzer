#!/usr/bin/python2

"""
This file is part of VDISCOVER.

VDISCOVER is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

VDISCOVER is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with VDISCOVER. If not, see <http://www.gnu.org/licenses/>.

Copyright 2014 by G.Grieco
"""

import os
import argparse
import csv
import sys
import random

from subprocess import Popen, PIPE, STDOUT

from vdiscover.Detection  import GetArgs, GetFiles, GetCmd
from vdiscover.Mutation   import NullMutator, RandomByteMutator, RandomExpanderMutator, RandomInputMutator, fuzz_cmd
from vdiscover.Input      import prepare_inputs


if __name__ == "__main__":

    # To help argparse to detect the number of columns correctly
    os.environ['COLUMNS'] = str(os.popen('stty size', 'r').read().split()[1]) #str(shutil.get_terminal_size().columns)

    # Arguments
    parser = argparse.ArgumentParser(description='Vulnerability Detection Procedure')
    parser.add_argument("testcase", help="Testcase to analyze", type=str, default=None)
    parser.add_argument("cmd", help="Testcase to analyze", type=str, default=None)

    parser.add_argument("--seed-range", type=str,
                        help="TODO", default="0:1000")

    parser.add_argument("--timeout", dest="timeout", type=int,
                        help="Timeout in seconds (dynamic features only)", default=3)

    parser.add_argument("--show-stdout",
                        help="Don't use /dev/null as stdout/stderr",
                        action="store_true", default=False)

    parser.add_argument("--gdb",
                        help="Invoke gdb at a crash",
                        action="store_true", default=False)

    parser.add_argument("--valgrind",
                        help="Detect errors with valgrind",
                        action="store_true", default=False)


    options = parser.parse_args()

    testcase = options.testcase
    vdp_cmd = options.cmd
    timeout = options.timeout
    show_stdout = options.show_stdout
    invoke_gdb = options.gdb
    use_valgrind = options.valgrind


    start_seed,stop_seed = tuple(options.seed_range.split(":"))

    os.chdir(testcase)
    program = GetCmd(None)

    os.chdir("inputs")

    envs = dict()
    args = GetArgs()
    files = GetFiles()

    original_inputs = RandomInputMutator(args + files, NullMutator)
    _, original_input = original_inputs.next()
    prepared_inputs = " ".join(prepare_inputs(original_input))
    
    for seed in xrange(int(start_seed),int(stop_seed)): 
   
      mutated_input = fuzz_cmd(prepared_inputs, vdp_cmd, seed)
      
      if use_valgrind:
        cmd = ["valgrind","--error-exitcode=-1",program]
      else:
        cmd = ["timeout","-k","1",str(timeout),program]
  
      if show_stdout:
        p = Popen(cmd+mutated_input.split(" "), stdin=PIPE, env=dict())
      else:
        p = Popen(cmd+mutated_input.split(" "), stdout=PIPE, stdin=PIPE, stderr=PIPE, env=dict())

      p.communicate()

      if p.returncode < 0:
        print testcase, p.returncode, seed, repr(mutated_input)
        if invoke_gdb:
          Popen(["gdb","--args",str(timeout),program]+mutated_input.split(" "), env=dict()).communicate()
